import React,{Component} from 'react';
import {ImageBackground,View,Text,Image,StyleSheet,Dimensions,Alert,NativeModules,TouchableHighlight,StatusBar,TouchableOpacity,  ScrollView,FlatList , } from 'react-native';
import ImagePicker from 'react-native-image-crop-picker';
import img_arr from './img_arr.js'
import RNFS from 'react-native-fs';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { Header } from 'react-native/Libraries/NewAppScreen';

//label为未分类标签，label1为分类标签，等翻译完成后会替换
const label =["背景",
"丁鱥",
"金鱼",
"大白鲨",
"虎鲨",
"锤子",
"电射线",
"黄貂鱼",
"公鸡",
"母鸡",
"鸵鸟",
"吹牛",
"金翅雀",
"雀科",
"顺哥",
"靛蓝彩旗鸟",
"知更鸟",
"夜莺",
"杰伊",
"鹊",
"山雀",
"水乌龙",
"风筝",
"白头鹰",
"秃鹰",
"大灰猫头鹰",
"欧洲火蝾螈",
"普通蝾螈",
"小蜥蜴",
"斑点蝾螈",
"蝾螈",
"牛蛙",
"树蛙",
"尾蛙",
"蠵龟",
"棱皮龟",
"泥龟",
"水龟",
"盒龟",
"带状壁虎",
"普通鬣蜥",
"美国变色龙",
"鞭尾蜥蜴",
"蜥蜴",
"褶边蜥蜴",
"鳄鱼蜥蜴",
"吉拉怪物",
"绿蜥蜴",
"非洲变色龙",
"科莫多巨蜥",
"非洲鳄鱼",
"美国短吻鳄",
"三角龙",
"雷蛇",
"颈蛇",
"蛇蛇",
"绿蛇",
"王蛇",
"吊袜带蛇",
"水蛇",
"藤蛇",
"夜蛇",
"蟒蛇",
"摇滚巨蟒",
"印度眼镜蛇",
"绿曼巴舞蛇",
"海蛇",
"角毒蛇",
"响尾蛇",
"响尾蛇",
"三叶虫",
"收割者",
"蝎",
"黑色和金色花园蜘蛛",
"谷仓蜘蛛",
"花园蜘蛛",
"黑寡妇",
"狼蛛",
"狼蛛",
"蜱",
"蜈",
"黑松鸡",
"雷鸟",
"松鸡",
"草原鸡",
"孔雀",
"鹌鹑",
"鹧鸪",
"非洲灰",
"金刚鹦鹉",
"硫凤头鹦鹉",
"长尾吸蜜鹦鹉",
"库库尔（鸦鹃）",
"蜂食者",
"犀鸟",
"蜂鸟",
"贾卡马尔",
"巨嘴鸟",
"德雷克",
"红胸秋沙鸭",
"鹅",
"黑天鹅",
"有长牙的动物（象等）",
"针食蚁兽",
"鸭嘴兽",
"小袋鼠",
"考拉",
"袋熊",
"海蜇",
"海葵",
"脑珊瑚",
"扁虫",
"线虫",
"海螺",
"蜗牛",
"蛞蝓",
"海蛞蝓",
"石鳖",
"室内鹦鹉螺",
"太平洋大蟹",
"岩蟹",
"招潮蟹",
"鲎",
"美国龙虾",
"刺龙虾",
"小龙虾",
"寄居蟹",
"等足类",
"白鹳",
"黑鹳",
"琵鹭",
"火烈鸟",
"小蓝鹭",
"美国白鹭",
"卤水",
"起重机",
"林普金",
"欧洲鸡",
"美国蹼鸡",
"鸨鸟",
"翻石鹬",
"红背鹬",
"红脚鹬",
"多威彻",
"牡蛎捕手",
"鹈",
"企鹅王",
"信天翁",
"灰鲸",
"逆戟鲸",
"儒艮",
"海狮",
"奇瓦瓦州",
"日本猎犬",
"马耳他狗",
"哈巴狗",
"西施犬",
"布伦海姆西班牙猎狗",
"巴比龙",
"玩具狗",
"罗得西亚脊背龙",
"阿富汗猎犬",
"巴塞",
"小猎犬",
"猎犬",
"蓝勾号",
"黑棕猎狗",
"沃克猎犬",
"猎狐犬",
"红骨",
"波尔佐伊",
"爱尔兰猎狼犬",
"意大利灵缇犬",
"小灵狗",
"伊比沙猎犬",
"挪威埃尔克猎犬",
"水獭猎犬",
"沙鲁基",
"苏格兰猎鹿犬",
"魏玛纳尔",
"斯塔福德郡布尔得利亚",
"美国斯塔福郡梗",
"贝德灵顿梗（犬种）",
"边境梗（犬种）",
"凯利蓝梗（犬种）",
"爱尔兰梗（犬种）",
"诺福克梗（犬种）",
"诺里奇梗（犬种）",
"约克夏犬（犬种）",
"硬毛狐狸梗（犬种）",
"莱克兰梗（犬种）",
"西里汉梗（犬种）",
"Airedale",
"cairn",
"澳大利亚梗（犬种）",
"丹迪·丁蒙特",
"波士顿公牛",
"迷你雪纳瑞犬",
"巨型雪纳瑞犬",
"标准雪纳瑞犬",
"苏格兰梗",
"西藏梗",
"柔滑的梗",
"软涂层小麦梗",
"西部高地白梗",
"拉萨犬",
"平涂猎犬",
"卷毛猎犬",
"金毛寻回犬",
"拉布拉多犬",
"切萨皮克湾猎犬",
"德国短毛指针",
"维斯拉",
"英语二传手",
"爱尔兰二传手",
"戈登塞特犬",
"布列塔尼西班牙猎狗",
"克伦伯",
"英国史宾格",
"威尔士史宾格犬",
"可卡犬",
"苏塞克斯猎犬",
"爱尔兰水猎犬",
"库瓦斯",
"schipperke",
"Groenendael",
"玛利诺犬",
"布里诺犬",
"海带",
"科蒙多",
"老英国牧羊犬",
"设得兰群岛牧羊犬",
"牧羊犬",
"边境牧羊犬",
"布维耶德法兰德斯",
"罗威纳犬",
"德国牧羊犬",
"杜宾犬",
"迷你杜宾犬",
"大瑞士山狗",
"伯恩山犬",
"阿彭策勒",
"恩特布鲁尔",
"boxer",
"bull mastiff",
"藏獒",
"法国斗牛犬",
"大丹犬",
"圣伯纳德",
"爱斯基摩犬",
"爱斯基摩狗",
"西伯利亚雪橇犬",
"达尔马提亚",
"阿彭平彻",
"巴森吉",
"哈巴狗",
"伦贝格",
"纽芬兰",
"大比利牛斯山脉犬",
"萨摩耶",
"博美犬",
"州城犬",
"基斯洪德",
"Brabancon griffon",
"彭布罗克",
"开襟衫犬",
"玩具贵宾犬",
"迷你贵宾犬",
"标准贵宾犬",
"墨西哥无毛犬",
"大灰狼",
"白狼",
"红狼",
"土狼",
"丁戈",
"豺",
"非洲猎犬",
"鬣狗",
"红狐",
"狐狸",
"白狐",
"灰狐狸",
"虎斑猫",
"虎猫",
"波斯猫",
"暹罗猫",
"埃及猫",
"美洲狮",
"猞猁",
"豹",
"雪豹",
"美洲虎",
"狮子",
"虎",
"猎豹",
"棕熊",
"美国黑熊",
"冰熊",
"懒熊",
"猫鼬",
"猫鼬",
"虎甲虫",
"瓢虫",
"地面甲虫",
"长角甲虫",
"叶甲虫",
"粪甲虫",
"犀牛甲虫",
"象鼻虫",
"蚊子",
"蜜蜂",
"蚂蚁",
"蚱蜢",
"蟋蟀",
"拐杖",
"蟑螂",
"螳螂",
"蝉",
"叶蝉",
"草蛉",
"蜻蜓",
"豆娘",
"admiral",
"ringlet",
"君主蝶",
"菜粉蝶",
"硫蝴蝶",
"灰蝶",
"海星",
"海胆",
"海参",
"木兔",
"野兔",
"安哥拉",
"仓鼠",
"豪猪",
"狐狸松鼠",
"土拨鼠",
"海狸",
"豚鼠",
"酢浆草",
"斑马",
"猪",
"野猪",
"疣猪",
"河马",
"牛",
"水牛",
"野牛",
"羊",
"大号角羊",
"伊比克斯羊",
"羚羊",
"黑斑羚",
"羚羊",
"阿拉伯骆驼",
"骆驼",
"黄鼠狼",
"貂",
"鸡貂",
"黑脚雪貂",
"獭",
"臭鼬",
"獾",
"犰狳",
"三趾树懒",
"猩猩",
"大猩猩",
"黑猩猩",
"长臂猿",
"赛芒",
"古农",
"帕塔斯",
"狒狒",
"猕猴",
"叶猴",
"疣猴",
"长鼻猴",
"狨",
"卷尾猴",
"吼猴",
"蒂蒂猴",
"蜘蛛猴",
"松鼠猴",
"马达加斯加猫",
"英德里",
"印度象",
"非洲象",
"小熊猫",
"大熊猫",
"梭子鱼",
"鳗鱼",
"银大马哈鱼",
"摇滚美女",
"银莲花鱼",
"鲟",
"长嘴硬鳞鱼",
"狮子鱼",
"河豚",
"算盘",
"阿巴亚",
"academic gown",
"accordion",
"原声吉他",
"航空母舰",
"客机",
"飞艇",
"坛",
"救护车",
"两栖动物",
"模拟时钟",
"蜂房",
"围裙",
"垃圾桶",
"突击步枪",
"背包",
"面包店",
"平衡木",
"气球",
"圆珠笔",
"创可贴",
"班卓",
"栏干",
"杠铃",
"理发椅",
"理发店",
"谷仓",
"晴雨表",
"桶",
"手推车",
"棒球",
"篮球",
"摇篮",
"巴松管",
"泳帽",
"浴巾",
"浴缸",
"沙滩车",
"信标",
"烧杯",
"熊皮",
"啤酒瓶",
"啤酒杯",
"贝尔科特",
"围兜",
"两人骑自行车",
"比基尼",
"黏合剂",
"望远镜",
"鸟巢",
"船屋",
"雪橇",
"领带",
"引擎盖",
"书柜",
"书店",
"瓶盖",
"弓",
"领结",
"黄铜",
"乳罩",
"防波堤",
"胸甲",
"扫帚",
"桶",
"扣",
"防弹背心",
"子弹头列车",
"肉店",
"出租车",
"甑",
"蜡烛",
"大炮",
"独木舟",
"开罐器",
"开襟衫",
"车镜",
"轮播",
"木匠的工具包",
"纸箱",
"车轮",
"取款机",
"暗盒",
"卡带机",
"城堡",
"双体船",
"激光唱机",
"大提琴",
"蜂窝电话",
"链",
"铁丝网围栏",
"锁子甲",
"链锯",
"胸部",
"薄纱裙",
"钟声",
"中国内阁",
"圣诞袜",
"教会",
"电影",
"切肉刀",
"悬崖住宅",
"披风",
"阻塞",
"鸡尾酒摇床",
"咖啡杯",
"咖啡壶",
"线圈",
"密码锁",
"计算机键盘",
"糖果",
"集装箱船",
"可转换",
"开瓶器",
"短号",
"牛仔靴",
"牛仔帽",
"摇篮",
"起重机",
"头盔",
"箱",
"婴儿床",
"缸罐",
"槌球",
"拐杖",
"胸甲",
"坝",
"台",
"台式电脑",
"拨打电话",
"尿布",
"数码时钟",
"电子表",
"餐桌",
"抹布",
"洗碗机",
"盘式制动器",
"码头",
"狗拉雪橇",
"圆顶",
"门垫",
"钻井平台",
"鼓",
"鼓槌",
"哑铃",
"荷兰烤箱",
"电扇",
"电吉他",
"电力机车",
"娱乐中心",
"信封",
"咖啡机",
"香粉",
"羽毛围巾",
"文件",
"消防船",
"消防车",
"防火屏",
"旗杆",
"长笛",
"折椅",
"橄榄球头盔",
"叉车",
"喷泉",
"钢笔",
"四海报",
"货运车",
"圆号",
"平底锅",
"皮毛大衣",
"垃圾车",
"防毒面具",
"加油站",
"高脚杯",
"卡丁车",
"高尔夫球",
"高尔夫车",
"吊船",
"锣",
"袍",
"三角钢琴",
"温室",
"格栅",
"杂货店",
"断头台",
"发夹",
"发胶",
"半履带",
"锤子",
"阻碍",
"手动鼓风机",
"手提电脑",
"手帕",
"硬盘",
"口琴",
"竖琴",
"收割机",
"斧头",
"皮套",
"家庭电影院",
"蜂窝",
"钩",
"短裙",
"单杠",
"马车",
"滴漏",
"iPod",
"铁",
"南瓜灯",
"牛仔裤",
"吉普车",
"球衣",
"拼图游戏",
"黄包车",
"游戏杆",
"和服",
"护膝",
"绳结",
"实验工作服",
"钢包",
"灯罩",
"笔记本电脑",
"割草机",
"镜头盖",
"开信刀",
"图书馆",
"救生艇",
"打火机",
"豪华轿车",
"衬垫",
"口红",
"浪子",
"洗剂",
"喇叭",
"放大镜",
"伐木场",
"磁罗盘",
"邮袋",
"邮箱",
"邮筒",
"邮筒",
"人孔盖",
"马拉卡",
"马林巴",
"面具",
"火柴棍",
"五月柱",
"迷宫",
"量杯",
"医药箱",
"巨石",
"麦克风",
"微波",
"军装",
"牛奶罐",
"小巴",
"迷你裙",
"小型货车",
"导弹",
"手套",
"搅拌碗",
"移动房屋",
"Model T",
"调制解调器",
"修道院",
"监控",
"助力车",
"砂浆",
"砂浆板",
"清真寺",
"蚊帐",
"小型摩托车",
"越野自行车",
"山顶帐篷",
"老鼠",
"捕鼠器",
"搬运车",
"枪口",
"钉",
"护颈",
"项链",
"乳头",
"笔记本",
"方尖碑",
"双簧管",
"陶器",
"里程表",
"机油滤清器",
"器官",
"示波器",
"超短裙",
"牛车",
"氧气面罩",
"包",
"桨",
"桨轮",
"挂锁",
"画笔",
"睡衣",
"宫殿",
"排箫",
"纸巾",
"降落伞",
"双杠",
"公园的长椅上",
"停车收费表",
"乘用车",
"庭院",
"公用电话",
"底座",
"铅笔盒",
"卷笔刀",
"香水",
"培养皿",
"影印机",
"镐",
"Pickelhaube",
"栅栏",
"Pickup",
"码头",
"存钱罐",
"药瓶",
"枕头",
"乒乓球",
"风车",
"海盗",
"投手",
"飞机",
"天文馆",
"塑料袋",
"板架",
"犁",
"柱塞",
"宝丽来相机",
"极",
"警车",
"雨披",
"台球桌",
"汽水瓶",
"锅",
"陶轮",
"电钻",
"祈祷毯",
"打印机",
"监狱",
"弹丸",
"投影机",
"冰球",
"出气筒",
"钱包",
"鹅毛笔",
"被子",
"赛车手",
"球拍",
"散热器",
"无线电",
"射电望远镜",
"雨桶",
"休闲车",
"卷轴",
"反射相机",
"冰箱",
"遥控",
"餐厅",
"左轮手枪",
"步枪",
"摇椅",
"烤肉店",
"橡皮擦",
"橄榄球",
"规则",
"跑鞋",
"安全",
"安全别针",
"盐瓶",
"凉鞋",
"围裙",
"萨克斯",
"刀鞘",
"规模",
"校车",
"大篷车",
"计分板",
"屏幕",
"拧",
"螺丝刀",
"安全带",
"缝纫机",
"护盾",
"鞋店",
"障子",
"购物篮",
"购物车",
"铲",
"浴帽",
"浴帘",
"滑雪",
"滑雪面罩",
"睡袋",
"计算尺",
"滑行门",
"插槽",
"呼吸管",
"雪地车",
"雪犁",
"皂液器",
"足球",
"袜子",
"太阳碟",
"草帽",
"汤碗",
"空格键",
"小型供暖器",
"航天飞机",
"抹刀",
"快艇",
"蜘蛛网",
"主轴",
"跑车",
"聚光灯",
"阶段",
"蒸汽机车",
"钢拱桥",
"钢桶",
"听诊器",
"披肩",
"石墙",
"跑表",
"火炉",
"滤网",
"电车",
"担架",
"单人沙发",
"佛塔",
"潜艇",
"套装",
"晷",
"太阳眼镜",
"墨镜",
"防晒霜",
"吊桥",
"拭子",
"运动衫",
"泳裤",
"摇摆",
"开关",
"注射器",
"台灯",
"坦克",
"录音机",
"茶壶",
"泰迪熊",
"电视",
"网球",
"茅草屋顶",
"剧院荧幕",
"顶针",
"脱粒机",
"王座",
"瓦屋顶",
"烤面包机",
"烟草店",
"马桶座圈",
"火炬",
"图腾柱",
"拖车",
"玩具店",
"拖拉机",
"拖车",
"托盘",
"风衣",
"三轮车",
"Trimaran",
"三脚架",
"凯旋门",
"电车",
"长号",
"浴盆",
"旋转栅门",
"打字机键盘",
"雨伞",
"单轮车",
"竖钢琴",
"真空吸尘器",
"花瓶",
"跳马",
"丝绒",
"自动售货机",
"法衣",
"高架桥",
"小提琴",
"排球",
"华夫铁",
"挂钟",
"钱包",
"衣柜",
"战机",
"脸盆",
"垫圈",
"水壶",
"水壶",
"水塔",
"威士忌酒壶",
"哨",
"假发",
"窗纱",
"窗帘",
"温莎领带",
"酒瓶",
"翅膀",
"炒锅",
"木勺子",
"羊毛",
"蠕虫围栏",
"破坏",
"耶鲁",
"蒙古包",
"网站",
"漫画书",
"填字游戏",
"街道路标",
"红绿灯",
"书外套",
"菜单",
"盘子",
"鳄梨",
"清醒的",
"火锅",
"Trifle",
"冰淇淋",
"冰棒",
"法国面包",
"百吉饼",
"椒盐脆饼",
"芝士汉堡",
"热狗",
"土豆泥",
"大白菜",
"西兰花",
"菜花",
"夏南瓜",
"意大利面南瓜",
"橡子南瓜",
"胡桃南瓜",
"黄瓜",
"朝鲜蓟",
"灯笼椒",
"朝鲜蓟",
"蘑菇",
"绿苹果",
"草莓",
"橙子",
"柠檬",
"无花果",
"菠萝",
"香蕉",
"菠萝蜜",
"释迦",
"石榴",
"干草",
"烤面条加干酪沙司",
"巧克力酱",
"面团",
"肉饼",
"比萨",
"锅饼",
"墨西哥卷饼",
"红酒",
"浓咖啡",
"杯子",
"蛋酒",
"阿尔卑斯山",
"泡沫",
"悬崖",
"珊瑚礁",
"喷泉",
"湖边",
"海角",
"沙洲",
"海滨",
"谷",
"火山",
"球手",
"马夫",
"潜水员",
"油菜籽",
"雏菊",
"黄色女士拖鞋",
"玉米",
"橡子",
"Hip",
"七叶树",
"珊瑚菌",
"伞菌",
"陀螺",
"臭角",
"量显地星",
"母鸡",
"牛肝菌",
"耳朵",
"卫生纸"];

const label1 =["水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"爬行动物",
"蛇",
"蛇",
"蛇",
"蛇",
"蛇",
"蛇",
"蛇",
"蛇",
"蛇",
"蛇",
"蛇",
"蛇",
"蛇",
"蛇",
"蛇",
"蛇",
"蛇",
"其他生物",
"其他生物",
"沙漠之旅",
"蜘蛛",
"蜘蛛",
"蜘蛛",
"蜘蛛",
"蜘蛛",
"蜘蛛",
"丛林&森林",
"丛林&森林",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"其他生物",
"袋鼠科",
"袋鼠科",
"袋鼠科",
"袋鼠科",
"袋鼠科",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"鸟类",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"犬科",
"猫科",
"猫科",
"猫科",
"猫科",
"猫科",
"猫科",
"猫科",
"猫科",
"猫科",
"猫科",
"猫科",
"猫科",
"猫科",
"熊、鼬",
"熊、鼬",
"熊、鼬",
"熊、鼬",
"熊、鼬",
"熊、鼬",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"植物",
"农场物语",
"农场物语",
"农场物语",
"农场物语",
"农场物语",
"农场物语",
"农场物语",
"农场物语",
"农场物语",
"农场物语",
"农场物语",
"农场物语",
"农场物语",
"农场物语",
"沙漠之旅",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"丛林&森林",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"水中世界",
"工具",
"工具",
"工具",
"乐器",
"乐器",
"交通",
"交通",
"交通",
"工具",
"交通",
"其他生物",
"生活所见",
"生活所见",
"衣服",
"生活所见",
"工具",
"工具",
"建筑",
"生活所见",
"工具",
"工具",
"工具",
"乐器",
"生活所见",
"工具",
"工具",
"建筑",
"建筑",
"生活所见",
"工具",
"工具",
"工具",
"工具",
"工具",
"乐器",
"生活所见",
"生活所见",
"生活所见",
"交通",
"生活所见",
"工具",
"生活所见",
"工具",
"工具",
"工具",
"工具",
"交通",
"衣服",
"工具",
"工具",
"生活所见",
"建筑",
"建筑",
"衣服",
"生活所见",
"生活所见",
"建筑",
"建筑",
"工具",
"衣服",
"生活所见",
"衣服",
"生活所见",
"衣服",
"工具",
"工具",
"工具",
"衣服",
"交通",
"建筑",
"交通",
"工具",
"工具",
"工具",
"交通",
"交通",
"衣服",
"工具",
"工具",
"工具",
"工具",
"工具",
"工具",
"工具",
"工具",
"建筑",
"交通",
"工具",
"乐器",
"工具",
"工具",
"生活所见",
"衣服",
"工具",
"工具",
"衣服",
"衣服",
"建筑",
"衣服",
"建筑",
"生活所见",
"工具",
"建筑",
"衣服",
"工具",
"工具",
"工具",
"工具",
"工具",
"工具",
"电子产品",
"食物",
"交通",
"工具",
"工具",
"乐器",
"衣服",
"衣服",
"生活所见",
"生活所见",
"衣服",
"工具",
"工具",
"工具",
"工具",
"工具",
"衣服",
"生活所见",
"生活所见",
"电子产品",
"工具",
"生活所见",
"电子产品",
"电子产品",
"生活所见",
"生活所见",
"工具",
"工具",
"建筑",
"工具",
"建筑",
"生活所见",
"建筑",
"乐器",
"乐器",
"乐器",
"工具",
"工具",
"乐器",
"交通",
"生活所见",
"生活所见",
"工具",
"生活所见",
"衣服",
"生活所见",
"交通",
"交通",
"生活所见",
"生活所见",
"乐器",
"生活所见",
"衣服",
"交通",
"生活所见",
"工具",
"生活所见",
"交通",
"乐器",
"工具",
"衣服",
"交通",
"工具",
"建筑",
"生活所见",
"交通",
"生活所见",
"交通",
"交通",
"乐器",
"衣服",
"生活所见",
"建筑",
"生活所见",
"建筑",
"工具",
"工具",
"生活所见",
"交通",
"工具",
"生活所见",
"工具",
"电子产品",
"生活所见",
"电子产品",
"乐器",
"乐器",
"工具",
"工具",
"工具",
"生活所见",
"生活所见",
"工具",
"衣服",
"生活所见",
"交通",
"工具",
"电子产品",
"生活所见",
"生活所见",
"衣服",
"交通",
"衣服",
"生活所见",
"交通",
"电子产品",
"衣服",
"生活所见",
"生活所见",
"衣服",
"生活所见",
"生活所见",
"电子产品",
"工具",
"工具",
"工具",
"建筑",
"交通",
"生活所见",
"交通",
"生活所见",
"生活所见",
"生活所见",
"工具",
"生活所见",
"工具",
"建筑",
"工具",
"工具",
"工具",
"工具",
"工具",
"生活所见",
"乐器",
"乐器",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"工具",
"生活所见",
"生活所见",
"电子产品",
"生活所见",
"衣服",
"工具",
"交通",
"衣服",
"交通",
"生活所见",
"衣服",
"生活所见",
"建筑",
"生活所见",
"工具",
"建筑",
"生活所见",
"交通",
"工具",
"工具",
"生活所见",
"生活所见",
"交通",
"交通",
"工具",
"爬行动物",
"工具",
"交通",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"工具",
"建筑",
"乐器",
"生活所见",
"工具",
"工具",
"生活所见",
"生活所见",
"衣服",
"交通",
"生活所见",
"生活所见",
"交通",
"交通",
"工具",
"工具",
"衣服",
"建筑",
"乐器",
"生活所见",
"工具",
"生活所见",
"生活所见",
"工具",
"交通",
"建筑",
"工具",
"生活所见",
"生活所见",
"工具",
"生活所见",
"生活所见",
"电子产品",
"工具",
"衣服",
"生活所见",
"交通",
"建筑",
"工具",
"工具",
"生活所见",
"生活所见",
"生活所见",
"交通",
"生活所见",
"交通",
"建筑",
"工具",
"工具",
"工具",
"工具",
"电子产品",
"生活所见",
"交通",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"工具",
"生活所见",
"电子产品",
"建筑",
"生活所见",
"电子产品",
"生活所见",
"工具",
"工具",
"工具",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"工具",
"工具",
"交通",
"工具",
"电子产品",
"生活所见",
"生活所见",
"建筑",
"生活所见",
"生活所见",
"生活所见",
"建筑",
"工具",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"衣服",
"衣服",
"乐器",
"生活所见",
"生活所见",
"交通",
"交通",
"生活所见",
"生活所见",
"生活所见",
"工具",
"生活所见",
"工具",
"工具",
"建筑",
"衣服",
"生活所见",
"生活所见",
"工具",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"工具",
"生活所见",
"生活所见",
"工具",
"交通",
"交通",
"生活所见",
"生活所见",
"衣服",
"生活所见",
"衣服",
"生活所见",
"生活所见",
"工具",
"交通",
"工具",
"交通",
"生活所见",
"生活所见",
"交通",
"生活所见",
"生活所见",
"交通",
"建筑",
"生活所见",
"工具",
"衣服",
"建筑",
"生活所见",
"生活所见",
"生活所见",
"交通",
"生活所见",
"生活所见",
"建筑",
"交通",
"衣服",
"工具",
"衣服",
"衣服",
"生活所见",
"建筑",
"生活所见",
"衣服",
"衣服",
"生活所见",
"生活所见",
"工具",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"电子产品",
"生活所见",
"建筑",
"生活所见",
"工具",
"工具",
"生活所见",
"建筑",
"工具",
"建筑",
"生活所见",
"生活所见",
"生活所见",
"交通",
"建筑",
"交通",
"交通",
"生活所见",
"衣服",
"交通",
"Trimaran",
"生活所见",
"建筑",
"交通",
"乐器",
"生活所见",
"生活所见",
"工具",
"生活所见",
"交通",
"乐曲",
"工具",
"生活所见",
"生活所见",
"生活所见",
"工具",
"衣服",
"建筑",
"乐器",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"工具",
"工具",
"衣服",
"生活所见",
"生活所见",
"衣服",
"生活所见",
"生活所见",
"工具",
"工具",
"生活所见",
"工具",
"生活所见",
"生活所见",
"建筑",
"生活所见",
"动漫",
"生活所见",
"交通",
"交通",
"工具",
"生活所见",
"生活所见",
"食物",
"生活所见",
"食物",
"食物",
"食物",
"食物",
"食物",
"食物",
"食物",
"食物",
"食物",
"食物",
"食物",
"食物",
"食物",
"食物",
"食物",
"食物",
"食物",
"食物",
"植物",
"植物",
"植物",
"植物",
"植物",
"植物",
"植物",
"植物",
"植物",
"植物",
"植物",
"植物",
"植物",
"植物",
"植物",
"食物",
"食物",
"食物",
"食物",
"食物",
"食物",
"食物",
"食物",
"食物",
"工具",
"食物",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"生活所见",
"植物",
"植物",
"生活所见",
"植物",
"植物",
"植物",
"植物",
"植物",
"植物",
"生活所见",
"生活所见",
"植物",
"植物",
"植物",
"生活所见",
"生活所见"];

var path1=RNFS.ExternalDirectoryPath;

const styles=StyleSheet.create({
  container:{
    flex: 1,
    //flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: +Dimensions.get('window').height * 0.01,
  },

  buttonOne:{
      width:Dimensions.get('window').width * 0.618,
      height:Dimensions.get('window').width * 0.618*0.2,
      backgroundColor:"#fde8fb",
      padding:10,
      alignItems: "center",
      opacity:0.8,
      
      transform: [
            
        {
          translateY: +Dimensions.get('window').height * 0.01,
        },
      ],
      borderRadius:10,
      borderWidth:1,
      borderColor:'#fac7f6',

    },
  buttonTwo:{
    width:Dimensions.get('window').width * 0.618,
    height:Dimensions.get('window').width * 0.618*0.2,
    backgroundColor:"#fde8fb",
    padding:10,
    alignItems: "center",
    opacity:0.8,
    transform: [
            
      {
        translateY: +Dimensions.get('window').height * 0.06,
      },
    ],
    borderRadius:10,
    borderWidth:1,
    borderColor:'#fac7f6',
  },
  buttonThree:{
    width:Dimensions.get('window').width * 0.618,
    height:Dimensions.get('window').width * 0.618*0.2,
    backgroundColor:"#fde8fb",
    padding:10,
    alignItems: "center",
    opacity:0.8,
      
    transform: [
            
      {
        translateY: +Dimensions.get('window').height * 0.11,
      },
    ],
    borderRadius:10,
    borderWidth:1,
    borderColor:'#fac7f6',
      

  },
  buttonFour: {
    marginBottom: 10,

    width:Dimensions.get('window').width * 0.618,
    height:Dimensions.get('window').width * 0.618*0.2,
    backgroundColor:"#fde8fb",
    padding:10,
    alignItems: "center",
    opacity:0.8,
    transform: [
            
      {
        translateY: +Dimensions.get('window').height * 0.05,
      },
    ],
      
    
    borderRadius:10,
    borderWidth:1,
    borderColor:'#fac7f6',
  },
  backgroundImage: {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    height: null,
    width: null,
    zIndex: -1,
    backgroundColor:'rgba(0,0,0,0)',
    opacity: 1
  }

});



function getRandom1(start, end) {
  var length = end - start + 1;
  var num = parseInt(Math.random() * length + start);
  return num;
};//生成随机数，用于随机主页背景。

class HomeScreen extends Component {

  async getPickerMessage(data) {  
    try{
      const response = await fetch('https://tf.yyanglin.com:81/v1/models/resnet:predict', 
       {
         method: 'POST',
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json'
          },
         body: JSON.stringify({
           instances: [{b64:data }],
       }),
     });
     return response.json();
    } 
    catch(error){
      console.error(error);
    }
  } 



  writeJson (){
    ImagePicker.openPicker({
      cropping: true,
      width: 1000,//因为没有实现放大查看的功能，所以在导入时要求裁剪为正方形
      height: 1000,
      sortOrder: 'none',
      includeBase64: true,
      includeExif: true,
      mediaType: 'photo',
    })
    .then(async (image) => {
      console.log('received image', image);
      const path = image.path;
      const data = image.data;
      const response = await this.getPickerMessage(data);
      if(response.predictions[0].probabilities[response.predictions[0].classes]>0.4){
      Alert.alert('识别成功','图片识别结果为'+label1[response.predictions[0].classes]+'，已为您放入分类相册');
      RNFS.writeFile(path1+'/classes.json','[','utf8');
      RNFS.writeFile(path1+'/'+label1[response.predictions[0].classes]+'.json','[','utf8');
      const string1=JSON.stringify({classes:label1[response.predictions[0].classes]});
      const string2=JSON.stringify({path:path});
      RNFS.appendFile(path1+'/classes.json',string1+',','utf8');
      RNFS.appendFile(path1+'/'+label1[response.predictions[0].classes]+'.json',string2+',','utf8');
      }else{
      Alert.alert('识别失败',"非常抱歉，暂时无法识别，已为您放入未分类相册");
      RNFS.writeFile(path1+'/classes.json','[','utf8');
      RNFS.writeFile(path1+'/未分类.json','[','utf8');
      const string1=JSON.stringify({classes:'未分类'});
      const string2=JSON.stringify({path:path});
      RNFS.appendFile(path1+'/classes.json',string1+',','utf8');
      RNFS.appendFile(path1+'/未分类.json',string2+',','utf8');}
    });
  }
  DeleteJson (){
    RNFS.unlink(path1);
  }


  render() {

    return(
      <ImageBackground style={styles.backgroundImage}
        source={img_arr['img'+getRandom1(1,2)]}>

          <View style={styles.container}>
            <StatusBar
              animated={true} //指定状态栏的变化是否应以动画形式呈现。目前支持这几种样式：backgroundColor, barStyle和hidden
              hidden={false}  //是否隐藏状态栏。
              backgroundColor={'#f8b9f4'} //状态栏的背景色
              translucent={true}//指定状态栏是否透明。设置为true时，应用会在状态栏之下绘制（即所谓“沉浸式”——被状态栏遮住一部分）。常和带有半透明背景色的状态栏搭配使用。
              barStyle={'light-content'} // enum('default', 'light-content', 'dark-content') 
            />

            {/* <Image
              source={require('./bighead.png')}
              style={{width: Dimensions.get('window').width*0.75,height: Dimensions.get('window').width*0.75-35 ,
                transform: [
            
                  {
                    translateY: -Dimensions.get('window').width * 0.15
                  },

                ],}}/> */
            }

                      
          <Text
            style={
              {fontSize:50,
              color:'#FF69B4',
              textAlign:'center',//文字居中显示
              // fontStyle:'italic',//字体是斜体
              letterSpacing:4, //字间距
              
              fontFamily:'fpywjt',//字体
              // fontWeight:'bold',//文字的粗细  bold 加粗  也可以设置成具体的字号大小（100，300,600，900是最粗的文字）
                          
                          
              transform: [
            
                {
                  translateY: -Dimensions.get('window').width * 0.1
                },

              ],
                    
              }}
            selectable={false}
            > 物体识别相机 </Text>

               
          <TouchableHighlight

            onPress={() => {
              ImagePicker.openPicker({
                cropping: true,
                compressImageMaxWidth: 1000,
                compressImageMaxHeight: 1000,
                sortOrder: 'none',
                includeBase64: true,
                includeExif: true,
                mediaType: 'photo',
                freeStyleCropEnabled: true,
              })
              .then(async (image) => {
                console.log('received image', image);
                const path = image.path;
                const data = image.data;
                const response = await this.getPickerMessage(data);
                if(response.predictions[0].probabilities[response.predictions[0].classes]>0.4){
                  if(response.predictions[0].probabilities[response.predictions[0].classes]<0.6)
                  this.props.navigation.navigate('Result',{prob:0,state:'盲猜',classes:label[response.predictions[0].classes]});
                  else if(response.predictions[0].probabilities[response.predictions[0].classes]<0.8)
                  this.props.navigation.navigate('Result',{prob:1,state:'觉得',classes:label[response.predictions[0].classes]});
                  else
                  this.props.navigation.navigate('Result',{prob:2,state:'确信',classes:label[response.predictions[0].classes]});
                }else
                Alert.alert("很抱歉，暂时无法识别哦，请换张图片吧");
              })
              
            }}
            style={styles.buttonOne}
            underlayColor={'#f58eee'}>
            <Text style={{fontSize:18,fontFamily:'hysrt',letterSpacing:1,}}>从相册选取ヾ(´･ω･｀)ﾉ</Text>
     
          </TouchableHighlight>
     
                
          {/* <View
               
            style={{alignItems:'stretch',height:50,width:100,backgroundColor:'white'}}/> */}
               
               
          <TouchableHighlight 
 
            onPress={() =>{
              ImagePicker.openCamera({
                cropping: true,
                compressImageMaxWidth: 1000,
                compressImageMaxHeight: 1000,
                sortOrder: 'none',
                includeBase64: true,
                includeExif: true,
                mediaType: 'photo',
                freeStyleCropEnabled: true,
              })
              .then(async (image) => {
                console.log('received image', image);
                const path = image.path;
                const data = image.data;
                const response = await this.getPickerMessage(data);
                if(response.predictions[0].probabilities[response.predictions[0].classes]>0.4){
                  if(response.predictions[0].probabilities[response.predictions[0].classes]<0.6)
                  this.props.navigation.navigate('Result',{prob:0,state:'盲猜',classes:label[response.predictions[0].classes]});
                  else if(response.predictions[0].probabilities[response.predictions[0].classes]<0.8)
                  this.props.navigation.navigate('Result',{prob:1,state:'觉得',classes:label[response.predictions[0].classes]});
                  else
                  this.props.navigation.navigate('Result',{prob:2,state:'确信',classes:label[response.predictions[0].classes]});
                }else
                Alert.alert("很抱歉，暂时无法识别哦，请换张图片吧");
              })
              
            }}
            style={styles.buttonTwo}
            underlayColor={'#f58eee'}>
            <Text style={{fontSize:18,fontFamily:'hysrt',letterSpacing:1,}}>用手机拍照|˛˙꒳​˙)♡</Text>
          </TouchableHighlight>

          <TouchableHighlight

            onPress={() => this.writeJson()}
            style={styles.buttonThree}
            underlayColor={'#f58eee'}>
            <Text style={{fontSize:18,fontFamily:'hysrt',letterSpacing:1,}}>导入图片(｡･∀･)ﾉﾞ</Text>
     
          </TouchableHighlight>
          <TouchableHighlight
            onPress={async () => {var result =await RNFS.readFile(path1+'/classes.json','utf8');
              result = result.substr(0,result.length-1)+']';
              result1 = JSON.parse(result);
              console.log(result);
              this.props.navigation.navigate('Details');}}
              style={styles.buttonThree}
              underlayColor={'#f58eee'}>
            <Text style={{fontSize:18,fontFamily:'hysrt',letterSpacing:1,}}>打开相册(｡･∀･)ﾉﾞ</Text>     
          </TouchableHighlight>          

          <TouchableHighlight

            onPress={() => {Alert.alert('提示','确认重置相册吗？',[
                {text: '确认', onPress: () => {this.DeleteJson();Alert.alert('重置成功');}},
                {text: '取消', onPress: () => console.log('取消重置相册'), style: 'cancel'},
              ],
              { cancelable: false });
            }}
            style={styles.buttonThree}
            underlayColor={'#f58eee'}>
            <Text style={{fontSize:18,fontFamily:'hysrt',letterSpacing:1,}}>重置相册(｡･∀･)ﾉﾞ</Text>
     
          </TouchableHighlight>

          <Text
            style={{textAlign:'center',fontSize:10,
              justifyContent:"flex-end",
              fontFamily:'fpywjt',

              transform: [
            
                {
                  translateY: +Dimensions.get('window').height * 0.2
                },

              ]       
            }}

            selectable={false}
            > Ver 1.0.0 </Text>
          </View>
      </ImageBackground>
    )
  }
};

function ResultPage({ route, navigation }){
  //识别结果页面
  const { classes } = route.params;
  const { prob } = route.params;
  const { state } = route.params;
  const img_arr_2 = [require('./s1.png'),require('./s2.png'),require('./s3.png')]
    return (
      //逄小博将来换成软件名
      <View style = {{alignItems: 'center',marginTop: +Dimensions.get('window').width * 0.01,justifyContent: 'center'}}>
      <TouchableOpacity>
        <Image source={img_arr_2[prob]}style={{width: Dimensions.get('window').width * 0.8,height: Dimensions.get('window').width * 0.8,}}/>
      </TouchableOpacity>
      <TouchableOpacity>
        <Text style={
                      {fontSize:30,
                      color:'#FF69B4',
                      textAlign:'center',//文字居中显示
                      fontFamily:'fpywjt',
                      
                    }}>逄小博{state}这张图片是</Text>
        <Text style={
                      {fontSize:30,
                      color:'#FF69B4',
                      textAlign:'center',//文字居中显示
                      fontFamily:'fpywjt',
                      
                    }}>{classes}</Text>                    
      </TouchableOpacity>
      <TouchableOpacity
          onPress={() => navigation.goBack()}
          style={styles.buttonFour}
        >
          <Text style={{fontSize:18,fontFamily:'hysrt',letterSpacing:1,}}>继续识别</Text>
      </TouchableOpacity>
      </View>
    )
}

function uniqObjInArray(objarray){
  //对象数组去重，使分类不重复
  let len = objarray.length;
  let tempJson = {
      
  };
  let res = [];
  for(let i = 0;i < len;i++){
      tempJson[JSON.stringify(objarray[i])] = true;
  }
  console.log("tempJson is ",tempJson);
  let keyItems= Object.keys(tempJson);
  for(let j = 0;j < keyItems.length;j++){
      res.push(JSON.parse(keyItems[j]));
  }
  return res;
}

var result1;//为未去重的分类数组
var result3;//为路径数组

class DetailsScreen extends Component {
  //分类页面
  constructor() {
    super();
    this.state = {
      image: null,
      images: null,
    };
  }
  
  render() {
    var result2=uniqObjInArray(result1);//为去重后的分类数组
    console.log(result2);
    return (
      <FlatList 
          data = {(result2)}
          keyExtractor={item => item.classes}
          numColumns ={2}
          renderItem={({item})=><ClassesList classes={item.classes} navigation={this.props.navigation}/>}
        />
    );
  }
}

class ClassesList extends Component {
  //分类页面中的各个分类
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <TouchableOpacity onPress={async () => {var result =await RNFS.readFile(path1+'/'+this.props.classes+'.json','utf8');
      result = result.substr(0,result.length-1)+']';
      result3 = JSON.parse(result);
      console.log(result);
      this.props.navigation.navigate('Photo');}} style={{ backgroundColor: 'blue', flex:0.5,alignItems: 'center',height: 80, borderRadius: 12,justifyContent:'center' }}>
        <Text style={{color:'white', fontSize: 20,fontFamily:'fpywjt'}}>{this.props.classes}</Text>
      </TouchableOpacity>
    )
  }
}

class PhotoScreen extends Component {
  //相册页面
  constructor() {
    super();
    this.state = {
      image: null,
      images: null,
    };
  }
  
  render() {
    return (
      <FlatList 
          data = {(result3)}
          keyExtractor={item => item.path}
          numColumns ={2}
          renderItem={({item})=><PhotoList path={item.path}/>}
        />
    );
  }
}

class PhotoList extends Component {
  //相册页面中的各个图片
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <TouchableOpacity style={{flex:0.5,}}>
        <Image source={{uri:this.props.path}} style={{width: Dimensions.get('window').width * 0.5,height: Dimensions.get('window').width * 0.5,}}/>
      </TouchableOpacity>
    )
  }
}

function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen name="Home" component={HomeScreen}  options={{ title: '分类相册',header:()=>{headerMode:'none'}}} />
        <Stack.Screen name="Details" component={DetailsScreen} options={{ title: '分类' }}/>
        <Stack.Screen name="Photo" component={PhotoScreen} options={{ title: '相册' }}/>
        <Stack.Screen name="Result" component={ResultPage} options={{ title: '识别结果' }}/>
      </Stack.Navigator>
    </NavigationContainer>
  );
}
const Stack = createStackNavigator();
export default App;
